#version 430 core
layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer PositionsIn {
  vec2 positionsIn[];
};

layout(std430, binding = 1) buffer PositionsOut {
  vec2 positionsOut[];
};

layout(std430, binding = 2) buffer Velocities {
  vec2 velocities[];
};

layout(std430, binding = 3) buffer TypeIds {
  int typeIds[];
};

layout(std430, binding = 4) buffer Forces {
  float forces[];
};

uniform float delta;
uniform float particleCount;
uniform float friction;
uniform float forceMultiplier;
uniform int maxTypeCount;

void main() {
  uint id = gl_GlobalInvocationID.x;

  if (id >= particleCount) return;

  vec2 finalForce = vec2(0,0);

  for (int i = 0; i < particleCount; i++) {
    if (i == id) continue;
    float force = forces[typeIds[id] * maxTypeCount + typeIds[i]];
    vec2 forceVector = normalize(positionsIn[i] - positionsIn[id]);
    forceVector *= force * forceMultiplier;
    finalForce += forceVector;
  }
  velocities[id] += finalForce;
  positionsOut[id] += velocities[id] * delta;
}